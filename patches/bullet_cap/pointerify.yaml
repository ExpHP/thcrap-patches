# pointerify.yaml - Binhacks dedicated to the pointer-ification of embedded static arrays in early games.

binhacks:
  /fields-if(th08):
    # Uncomment this to give yourself a chance to attach CE if you need to debug a crash in life before main.
    # ExpHP.bullet-cap.loop:
    #   addr: "0x4a619e"
    #   expected: "6a60"  # push 60
    #   code: "EBFE"
    
    # BulletManager::reset requires us to have done our search and replace work already,
    # and there's no reason to be calling it in life before main anyways.  Nop this call out.
    ExpHP.bullet-cap.dont-reset-before-main:
      addr: "0x42f489"
      code: "9090909090"

    ExpHP.bullet-cap.pointerify-bullets-constructor:
      addr: "0x42f43c"  # (in BulletManager::constructor (life before main))
      expected: "6800f54200"
      codecave:
        # Allocate space for the bullets.
        #
        # This is not what the original code did (which called default value initializers on a
        # static bullet array).  And we don't need to worry about calling those initializers
        # because the bullets are about to be memset to 0 anyways.
        - "A1<codecave:bullet-cap>" # mov  eax, [new_bullet_cap_bigendian]
        - "0FC8              " # bswap eax
        - "40                " # inc  eax  ; plus dummy bullet
        - "69C0B8100000      " # imul eax, BULLET_SIZE
        - "50                " # push eax
        - "B8D4434A00        " # mov  eax, FUNC_MALLOC
        - "FFD0              " # call eax
        - "83C404            " # add  esp, 0x4  ; caller cleans stack
        - "A310F7F600        " # mov  [BULLET_ARRAY_PTR], eax

        # oh and uhhh lasers too cause they're on the same struct
        - "A1<codecave:laser-cap>" # mov  eax, [new_laser_cap_bigendian]
        - "0FC8              " # bswap eax
        - "69C09C050000      " # imul eax, LASER_SIZE
        - "50                " # push eax
        - "B8D4434A00        " # mov  eax, FUNC_MALLOC
        - "FFD0              " # call eax
        - "83C404            " # add  esp, 0x4  ; caller cleans stack
        - "A3B0CD4C01        " # mov  [LASER_ARRAY_PTR], eax
        - "E800000000C70424 78f44200 C3" # jump to 0x42f478

    ExpHP.bullet-cap.pointerify-keep-the-pointers:
      addr: "0x42f36a"
      expected: "b95ee91a00"
      codecave:
        - "56                " # push esi  ; save
        # Keep the pointer when the struct is memset to 0.
        - "FF3510F7F600      " # push dword [BULLET_ARRAY_PTR]
        - "FF35B0CD4C01      " # push dword [LASER_ARRAY_PTR]

        # memset the entire struct (this is the original code)
        - "B95EE91A00        " # mov  ecx, BULLET_MANAGER_NUM_DWORDS
        - "31C0              " # xor  eax, eax
        - "8B7DF4            " # mov  edi, dword [ebp-0xc]
        - "F3AB              " # rep stosd

        - "8F05B0CD4C01      " # pop  dword [LASER_ARRAY_PTR]
        - "8F0510F7F600      " # pop  dword [BULLET_ARRAY_PTR]

        # we also have to memset our arrays now, too
        - "8B35<codecave:bullet-cap>" # mov  esi, [new_bullet_cap_bigendian]
        - "0FCE              " # bswap esi
        - "46                " # inc  esi  ; plus dummy bullet
        - "69F6B8100000      " # imul esi, BULLET_SIZE
        - "89F1              " # mov  ecx, esi
        - "8B3D10F7F600      " # mov  edi, [BULLET_ARRAY_PTR]
        - "F3AA              " # rep stosb

        # NOTE: keeping the bullet array size in esi
        - "8B0D<codecave:laser-cap>" # mov  ecx, [new_laser_cap_bigendian]
        - "0FC9              " # bswap ecx
        - "69C99C050000      " # imul ecx, LASER_SIZE
        - "8B3DB0CD4C01      " # mov  edi, [LASER_ARRAY_PTR]
        - "F3AA              " # rep stosb

        # set the sentinel state on the dummy bullet (our other binhacks aren't enough to make this happen)
        - "8B3D10F7F600      " # mov  edi, [BULLET_ARRAY_PTR]
        - "66C7843700FDFFFF0600" # mov  word [edi + esi - BULLET_SIZE + BULLET_STATE], 6

        - "5E                " # pop  esi
        - "E800000000C70424 76f34200 C3" # jump to 0x42f376

    ExpHP.bullet-cap.pointerify-bullets-static-0c:
      addr:
        - "0x423a6c"  # (in a funcSet/funcCall func)
        - "0x423e2c"  # (in a funcSet/funcCall func)
        - "0x4241ec"  # (in a funcSet/funcCall func)
        - "0x42529c"  # (in a funcSet/funcCall func)
      expected: "c745f410f7f600"
      call-codecave:
        - "A110F7F600        " # mov  eax, [BULLET_ARRAY_PTR]
        - "8945F4            " # mov  dword [ebp-0x0c], eax
        - "C3                " # ret

    ExpHP.bullet-cap.pointerify-bullets-static-08:
      addr:
        - "0x424a2c"  # (in a funcSet/funcCall func)
        - "0x424c4c"  # (in a funcSet/funcCall func)
        - "0x424e5c"  # (in a funcSet/funcCall func)
        - "0x4250dc"  # (in a funcSet/funcCall func)
        - "0x4251e6"  # (in a funcSet/funcCall func)
        - "0x42f3a0"  # (in BulletManager::reset_bullet_array)
      expected: "c745f810f7f600"
      call-codecave:
        - "A110F7F600        " # mov  eax, [BULLET_ARRAY_PTR]
        - "8945F8            " # mov  dword [ebp-0x08], eax
        - "C3                " # ret

    ExpHP.bullet-cap.pointerify-bullets-static-1c:
      addr: "0x43083a"  # (in some cancel func)
      expected: "c745e410f7f600"
      call-codecave:
        - "A110F7F600        " # mov  eax, [BULLET_ARRAY_PTR]
        - "8945E4            " # mov  dword [ebp-0x1c], eax
        - "C3                " # ret

    ExpHP.bullet-cap.pointerify-bullets-static-18:
      addr: "0x430abe"  # (in another cancel func)
      expected: "c745e810f7f600"
      call-codecave:
        - "A110F7F600        " # mov  eax, [BULLET_ARRAY_PTR]
        - "8945E8            " # mov  dword [ebp-0x18], eax
        - "C3                " # ret

    ExpHP.bullet-cap.pointerify-bullets-static-14:
      addr: "0x430d3a"  # (in yet another cancel func)
      expected: "c745ec10f7f600"
      call-codecave:
        - "A110F7F600        " # mov  eax, [BULLET_ARRAY_PTR]
        - "8945EC            " # mov  dword [ebp-0x14], eax
        - "C3                " # ret

    ExpHP.bullet-cap.pointerify-bullets-offset-eax:
      addr:
        - "0x42f379"  # (in BulletManager::reset_bullet_array)
        - "0x431254"  # (in BulletManager::on_tick)
      expected: "0580a80100"
      call-codecave:
        - "A110F7F600        " # mov  eax, [BULLET_ARRAY_PTR]
        - "C3                " # ret

    ExpHP.bullet-cap.pointerify-bullets-offset-edx:
      addr:
        - "0x42f657"  # (in BulletManager::shoot_one_bullet)
        - "0x42fe23"  # (in BulletManager::shoot_one_bullet)
      expected: "81c280a80100"
      call-codecave:
        - "8B1510F7F600      " # mov  edx, [BULLET_ARRAY_PTR]
        - "C3                " # ret

    ExpHP.bullet-cap.pointerify-lasers-offset-edx:
      addr:
        - "0x42f46c"  # (in BulletManager::constructor)
        - "0x430941"  # (in a cancel func)
      expected: "81c238096600"
      call-codecave:
        - "8B15B0CD4C01      " # mov  edx, [LASER_ARRAY_PTR]
        - "C3                " # ret

    ExpHP.bullet-cap.pointerify-lasers-offset-eax:
      addr:
        - "0x430bcb"  # (in another cancel func)
        - "0x430f2c"  # (in BulletManager::shoot_lasers)
        - "0x431b75"  # (in BulletManager::on_tick)
      expected: "0538096600"
      call-codecave:
        - "A1B0CD4C01        " # mov  eax, [LASER_ARRAY_PTR]
        - "C3                " # ret

    ExpHP.bullet-cap.pointerify-lasers-offset-ecx:
      addr: "0x432b7b"  # (in BulletManager::on_draw)
      expected: "81c138096600"
      call-codecave:
        - "8B0DB0CD4C01      " # mov  ecx, [LASER_ARRAY_PTR]
        - "C3                " # ret

    ExpHP.bullet-cap.pointerify-items-constructor:
      addr: "0x440021"
      expected: "68e4020000"
      codecave:
        # The line before this pushed the cancel cap + 1 (and we couldn't replace
        # it because bullet_cap promises to preserve and replace such values).
        #
        # However we can't use it because this runs before our search and
        # replace code, so just ignore it.
        - "83C404            " # add  esp, 0x4

        - "A1<codecave:cancel-cap>" # mov  eax, [new_cancel_cap_bigendian]
        - "0FC8              " # bswap eax
        - "40                " # inc  eax
        - "50                " # push eax  ; save a copy of array length for later

        - "69C0E4020000      " # imul eax, ITEM_SIZE
        - "50                " # push eax
        - "B8D4434A00        " # mov  eax, FUNC_MALLOC
        - "FFD0              " # call eax
        - "83C404            " # add  esp, 0x4  ; caller cleans stack
        - "A348366501        " # mov  [ITEM_ARRAY_PTR], eax

        - "58                " # pop  eax  ; saved copy of array length
        - "6850004400        " # push FUNC_ITEM_CONSTRUCTOR
        - "50                " # push eax
        - "68E4020000        " # push ITEM_SIZE
        - "FF3548366501      " # push dword [ITEM_ARRAY_PTR]
        - "B850684000        " # mov  eax, FUNC_INITIALIZE_VECTOR
        - "FFD0              " # call eax

        - "E800000000C70424 2f004400 C3" # jump to 0x44002f

    ExpHP.bullet-cap.pointerify-items-keep-the-pointer:
      addr: "0x4337ff"
      expected: "8b7dfcf3ab"
      codecave:
        # avoid zeroing out the pointer during this memcpy
        - "FF3548366501      " # push dword [ITEM_ARRAY_PTR]
        - "8B7DFC            " # mov  edi, [ebp-0x4]  ; original code
        - "F3AB              " # rep stosd            ; original code
        - "8F0548366501      " # pop  dword [ITEM_ARRAY_PTR]
        - "E800000000C70424 04384300 C3" # jump to 0x433804

    ExpHP.bullet-cap.pointerify-items-spawn:
      addr: "0x4400b8"
      expected: "8b55f403d1"
      codecave:
        - "8B55F4            " # mov  edx, [ebp-0xc]
        - "8B12              " # mov  edx, [edx]  ; follow pointer
        - "01CA              " # add  edx, ecx
        - "E800000000C70424 bd004400 C3" # jump to 0x4400bd

    ExpHP.bullet-cap.pointerify-items-spawn-2-eax:
      addr:
        - "0x4400e4"
        - "0x4401b0"
      expected:
        - "8b45f4"      # mov  eax, dword [ebp-0xc]
        - "05c0aa1700"  # add  eax, 0x17aac0
      call-codecave:
        - "A1<codecave:cancel-cap>" # mov  eax, [new_cancel_cap_bigendian]
        - "0FC8              " # bswap eax
        - "69C0E4020000      " # imul eax, ITEM_SIZE
        - "030548366501      " # add  eax, [ITEM_ARRAY_PTR]
        - "C3                " # ret

    ExpHP.bullet-cap.pointerify-items-spawn-2-edx:
      addr:
        - "0x440455"
      expected:
        - "8b55f4"        # mov  edx, dword [ebp-0xc]
        - "81c2c0aa1700"  # add  edx, 0x17aac0
      call-codecave:
        - "8B15<codecave:cancel-cap>" # mov  edx, [new_cancel_cap_bigendian]
        - "0FCA              " # bswap edx
        - "69D2E4020000      " # imul edx, ITEM_SIZE
        - "031548366501      " # add  edx, [ITEM_ARRAY_PTR]
        - "C3                " # ret

    ExpHP.bullet-cap.pointerify-items-spawn-wrap:
      addr: "0x440196"
      expected: "8b4df4894df8"
      codecave:
        - "8B4DF4            " # mov  ecx, [ebp-0xc]
        - "8B09              " # mov  ecx, [ecx]   ; added instruction
        - "894DF8            " # mov  [ebp-0x8], ecx
        - "E800000000C70424 aa014400 C3" # jump to 0x4401aa
